name: Lighthouse Audit
on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  lhci:
    name: Run Lighthouse
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.17.1

      - name: Install Dependencies
        run: npm install

      - name: Build Site
        run: npm run build

      - name: Install Lighthouse CLI
        run: npm install -g @lhci/cli@0.13.0

      - name: Run Lighthouse CLI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Write Lighthouse Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            function loadJSONReport(filePath) {
              return JSON.parse(fs.readFileSync(filePath, 'utf8'));
            }

            function getScoreEmoji(score) {
              return score >= 90 ? 'ðŸŸ¢' : score >= 50 ? 'ðŸŸ¡' : 'ðŸ”´';
            }

            function extractPagePath(url) {
              return new URL(url).pathname.substring(1);
            }

            function generateCategoryScores(report) {
              if (!report.categories || typeof report.categories !== 'object') {
                return 'No categories found in report.\n';
              }

              return Object.entries(report.categories).map(([categoryKey, category]) => {
                const score = Math.round(category.score * 100);
                const emoji = getScoreEmoji(score);
                return `${emoji} **${category.title[0]}:** ${score}% `;
              }).join('');
            }

            // Main function
            function generateCommentBody(reportPath) {
              let commentBody = '#### ðŸš€ Lighthouse Results\n';

              const files = fs.readdirSync(reportPath);
              files.forEach(file => {
                if (file.includes('links') || path.extname(file) !== '.json') return;

                const reportFilePath = path.join(reportPath, file);
                const report = loadJSONReport(reportFilePath);
                const categoryScores = generateCategoryScores(report);
                commentBody += categoryScores;

                if (report.requestedUrl) {
                  const pagePath = extractPagePath(report.requestedUrl);
                  commentBody += `â€” ${pagePath} `;
                }

                commentBody += '\n';
              });

              return commentBody;
            }

            // Call Main function
            const reportPath = './.lighthouseci';
            const comment = generateCommentBody(reportPath);

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
