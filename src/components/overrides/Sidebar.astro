---
import type { Props } from '@astrojs/starlight/props';
import MobileMenuFooter from '@astrojs/starlight/components/MobileMenuFooter.astro';
import SidebarSublist from './SidebarSublist.astro';

interface SidebarProps extends Props {
  title: string;
  description: string;
  showHeader?: boolean;
}

// The showHeader prop will be true if it's defined (even without an explicit value)
const { sidebar, title, description, showHeader } = Astro.props as SidebarProps;
const shouldShowHeader = showHeader !== undefined;
---

<!-- Conditionally render the title and description based on showHeader prop -->{
  shouldShowHeader && (
    <div class="sidebar-header">
      <h2>{title}</h2>
      <p>{description}</p>
    </div>
  )
}

<SidebarSublist sublist={sidebar} />
<div class="md:sl-hidden">
  <MobileMenuFooter {...Astro.props} />
</div>

<script is:inline>
  (() => {
    const sidebar = document.querySelector('#starlight__sidebar');
    if (!sidebar) return; // Guard clause to handle null

    const details = sidebar.querySelectorAll('details');
    const storedData = JSON.parse(sessionStorage.getItem('starlight_sidebar') ?? '{}');
    const { top, collapse } = storedData;

    if (top !== undefined && collapse && collapse.length === details.length) {
      details.forEach((el, i) => {
        el.open = collapse[i];
      });
      sidebar.scrollTop = top;
    }

    window.addEventListener('beforeunload', () => {
      const collapse = Array.from(details).map((el) => el.open);

      sessionStorage.setItem(
        'starlight_sidebar',
        JSON.stringify({
          top: sidebar.scrollTop,
          collapse,
        })
      );
    });
  })();
</script>

<style>
  .sidebar-header {
    padding: 1rem;
    border-bottom: 1px solid #ddd;
  }

  .sidebar-header h2 {
    margin: 0;
    font-size: 1.5rem;
  }

  .sidebar-header p {
    margin: 0.5rem 0 0;
    font-size: 1rem;
    color: #666;
  }
</style>
